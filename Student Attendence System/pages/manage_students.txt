import React, { useState, useEffect, useCallback } from "react";
import { User } from "@/entities/User";
import { Student } from "@/entities/Student";
import { base44 } from "@/api/base44Client";
import { useNavigate } from "react-router-dom";
import { createPageUrl } from "@/utils";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { ArrowLeft, Users, Plus, Trash2, UserPlus, LogIn, BookOpen, Upload, Download } from "lucide-react";
import { Alert, AlertDescription } from "@/components/ui/alert";
import { Badge } from "@/components/ui/badge";

export default function ManageStudentsPage() {
  const navigate = useNavigate();
  const [user, setUser] = useState(null);
  const [classroom, setClassroom] = useState(null);
  const [students, setStudents] = useState([]);
  const [isLoading, setIsLoading] = useState(true);
  const [isSaving, setIsSaving] = useState(false);
  const [isUploading, setIsUploading] = useState(false);
  const [error, setError] = useState("");
  const [success, setSuccess] = useState("");
  const [newStudent, setNewStudent] = useState({
    name: "",
    roll_number: "",
    email: ""
  });

  const checkAuthAndData = useCallback(async () => {
    try {
      const currentUser = await User.me();
      setUser(currentUser);
      
      const selectedClassroom = localStorage.getItem('selectedClassroom');
      if (!selectedClassroom) {
        navigate(createPageUrl("Dashboard"));
        return;
      }
      
      const classroomData = JSON.parse(selectedClassroom);
      setClassroom(classroomData);
      
      // Load existing students
      const existingStudents = await Student.filter({ classroom_id: classroomData.id });
      setStudents(existingStudents);
    } catch (error) {
      setUser(null);
    }
    setIsLoading(false);
  }, [navigate]);

  useEffect(() => {
    checkAuthAndData();
  }, [checkAuthAndData]);

  const handleLogin = async () => {
    try {
      await User.loginWithRedirect(window.location.origin + createPageUrl("ManageStudents"));
    } catch (error) {
      console.error("Login error:", error);
    }
  };

  const handleInputChange = (field, value) => {
    setNewStudent(prev => ({ ...prev, [field]: value }));
    setError("");
    setSuccess("");
  };

  const handleAddStudent = async (e) => {
    e.preventDefault();
    
    if (!newStudent.name.trim() || !newStudent.roll_number.trim()) {
      setError("Please fill in student name and roll number.");
      return;
    }

    // Check if roll number already exists
    const existingStudent = students.find(s => s.roll_number === newStudent.roll_number.trim());
    if (existingStudent) {
      setError("A student with this roll number already exists.");
      return;
    }

    setIsSaving(true);
    
    try {
      const student = await Student.create({
        name: newStudent.name.trim(),
        roll_number: newStudent.roll_number.trim(),
        email: newStudent.email.trim(),
        classroom_id: classroom.id,
        teacher_email: user.email
      });

      setStudents(prev => [...prev, student]);
      setNewStudent({ name: "", roll_number: "", email: "" });
      setSuccess("Student added successfully!");
    } catch (error) {
      setError("Failed to add student. Please try again.");
    }
    
    setIsSaving(false);
  };

  const handleFileUpload = async (e) => {
    const file = e.target.files[0];
    if (!file) return;

    setIsUploading(true);
    setError("");
    setSuccess("");

    try {
      // Upload file first
      const { file_url } = await base44.integrations.Core.UploadFile({ file });

      // Extract data from file
      const result = await base44.integrations.Core.ExtractDataFromUploadedFile({
        file_url,
        json_schema: {
          type: "object",
          properties: {
            students: {
              type: "array",
              items: {
                type: "object",
                properties: {
                  name: { type: "string" },
                  roll_number: { type: "string" },
                  email: { type: "string" }
                },
                required: ["name", "roll_number"]
              }
            }
          }
        }
      });

      if (result.status === "error") {
        setError(`Failed to process file: ${result.details}`);
        setIsUploading(false);
        return;
      }

      const studentsData = result.output.students || [];
      
      if (studentsData.length === 0) {
        setError("No students found in the file. Please make sure the file has columns: name, roll_number, email (optional)");
        setIsUploading(false);
        return;
      }

      // Filter out duplicates
      const existingRolls = students.map(s => s.roll_number);
      const newStudents = studentsData.filter(s => !existingRolls.includes(s.roll_number));

      if (newStudents.length === 0) {
        setError("All students in the file already exist in this classroom.");
        setIsUploading(false);
        return;
      }

      // Bulk create students
      const studentsToCreate = newStudents.map(s => ({
        name: s.name,
        roll_number: s.roll_number,
        email: s.email || "",
        classroom_id: classroom.id,
        teacher_email: user.email
      }));

      const createdStudents = await Student.bulkCreate(studentsToCreate);
      setStudents(prev => [...prev, ...createdStudents]);
      setSuccess(`Successfully imported ${createdStudents.length} students!`);
    } catch (error) {
      setError("Failed to upload and process file. Please make sure it's a valid Excel/CSV file with columns: name, roll_number, email (optional)");
    }

    setIsUploading(false);
    e.target.value = ""; // Reset file input
  };

  const downloadTemplate = () => {
    const csvContent = "name,roll_number,email\nJohn Doe,001,john@example.com\nJane Smith,002,jane@example.com";
    const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
    const link = document.createElement('a');
    const url = URL.createObjectURL(blob);
    link.setAttribute('href', url);
    link.setAttribute('download', 'student_import_template.csv');
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
  };

  const handleDeleteStudent = async (studentId) => {
    if (!window.confirm("Are you sure you want to delete this student?")) {
      return;
    }

    try {
      await Student.delete(studentId);
      setStudents(prev => prev.filter(s => s.id !== studentId));
      setSuccess("Student deleted successfully!");
    } catch (error) {
      setError("Failed to delete student. Please try again.");
    }
  };

  const goBack = () => {
    navigate(createPageUrl("Dashboard"));
  };

  const handleFinish = () => {
    navigate(createPageUrl("Dashboard"));
  };

  if (isLoading) {
    return (
      <div className="flex items-center justify-center min-h-96">
        <div className="text-center">
          <div className="w-8 h-8 border-2 border-blue-600 border-t-transparent rounded-full animate-spin mx-auto mb-4"></div>
          <p className="text-slate-600">Loading...</p>
        </div>
      </div>
    );
  }

  if (!user) {
    return (
      <div className="max-w-2xl mx-auto text-center py-16">
        <h1 className="text-2xl font-bold text-slate-800 mb-4">Authentication Required</h1>
        <p className="text-slate-600 mb-8">Please log in to manage students.</p>
        <Button
          onClick={handleLogin}
          className="bg-gradient-to-r from-blue-600 to-indigo-600 hover:from-blue-700 hover:to-indigo-700"
        >
          <LogIn className="w-5 h-5 mr-2" />
          Login to Continue
        </Button>
      </div>
    );
  }

  if (!classroom) return null;

  return (
    <div className="max-w-4xl mx-auto space-y-8">
      <div className="flex items-center justify-between">
        <Button 
          variant="ghost" 
          onClick={goBack}
          className="flex items-center text-slate-600 hover:text-slate-800"
        >
          <ArrowLeft className="w-4 h-4 mr-2" />
          Back to Dashboard
        </Button>
      </div>

      <div className="text-center">
        <div className="w-16 h-16 bg-gradient-to-r from-blue-500 to-indigo-500 rounded-2xl flex items-center justify-center mx-auto mb-4">
          <Users className="w-8 h-8 text-white" />
        </div>
        <h1 className="text-3xl font-bold text-slate-800 mb-2">Manage Students</h1>
        <div className="flex items-center justify-center space-x-2 text-slate-600">
          <BookOpen className="w-4 h-4" />
          <span>{classroom.name} - {classroom.subject}</span>
        </div>
      </div>

      {/* Import from Excel */}
      <Card className="shadow-xl border-0 bg-gradient-to-r from-purple-50 to-blue-50">
        <CardHeader>
          <CardTitle className="flex items-center">
            <Upload className="w-5 h-5 mr-2" />
            Import Students from Excel/CSV
          </CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          <p className="text-sm text-slate-600">
            Upload an Excel or CSV file with student data. The file should have columns: <strong>name</strong>, <strong>roll_number</strong>, and <strong>email</strong> (optional).
          </p>
          <div className="flex flex-col sm:flex-row gap-3">
            <Button
              variant="outline"
              onClick={downloadTemplate}
              className="flex-1"
            >
              <Download className="w-4 h-4 mr-2" />
              Download Template
            </Button>
            <label className="flex-1">
              <Button
                variant="default"
                className="w-full bg-gradient-to-r from-purple-600 to-indigo-600 hover:from-purple-700 hover:to-indigo-700"
                disabled={isUploading}
                asChild
              >
                <span>
                  {isUploading ? (
                    <>
                      <div className="w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin mr-2" />
                      Processing...
                    </>
                  ) : (
                    <>
                      <Upload className="w-4 h-4 mr-2" />
                      Upload File
                    </>
                  )}
                </span>
              </Button>
              <input
                type="file"
                accept=".csv,.xlsx,.xls"
                onChange={handleFileUpload}
                className="hidden"
                disabled={isUploading}
              />
            </label>
          </div>
        </CardContent>
      </Card>

      {/* Alerts */}
      {error && (
        <Alert variant="destructive">
          <AlertDescription>{error}</AlertDescription>
        </Alert>
      )}

      {success && (
        <Alert className="border-emerald-200 bg-emerald-50">
          <AlertDescription className="text-emerald-800">{success}</AlertDescription>
        </Alert>
      )}

      {/* Add New Student Manually */}
      <Card className="shadow-xl border-0 bg-white/80 backdrop-blur-sm">
        <CardHeader>
          <CardTitle className="flex items-center">
            <UserPlus className="w-5 h-5 mr-2" />
            Add New Student Manually
          </CardTitle>
        </CardHeader>
        <CardContent>
          <form onSubmit={handleAddStudent} className="space-y-4">
            <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
              <div className="space-y-2">
                <Label htmlFor="name" className="text-slate-700 font-medium">
                  Student Name <span className="text-red-500">*</span>
                </Label>
                <Input
                  id="name"
                  placeholder="Full name"
                  value={newStudent.name}
                  onChange={(e) => handleInputChange('name', e.target.value)}
                  className="h-10 border-slate-200 focus:border-blue-500 focus:ring-blue-500"
                  required
                />
              </div>

              <div className="space-y-2">
                <Label htmlFor="roll_number" className="text-slate-700 font-medium">
                  Roll Number <span className="text-red-500">*</span>
                </Label>
                <Input
                  id="roll_number"
                  placeholder="e.g., 001, A001"
                  value={newStudent.roll_number}
                  onChange={(e) => handleInputChange('roll_number', e.target.value)}
                  className="h-10 border-slate-200 focus:border-blue-500 focus:ring-blue-500"
                  required
                />
              </div>

              <div className="space-y-2">
                <Label htmlFor="email" className="text-slate-700 font-medium">
                  Email (Optional)
                </Label>
                <Input
                  id="email"
                  type="email"
                  placeholder="student@email.com"
                  value={newStudent.email}
                  onChange={(e) => handleInputChange('email', e.target.value)}
                  className="h-10 border-slate-200 focus:border-blue-500 focus:ring-blue-500"
                />
              </div>
            </div>

            <Button
              type="submit"
              disabled={isSaving}
              className="bg-gradient-to-r from-emerald-600 to-green-600 hover:from-emerald-700 hover:to-green-700 text-white"
            >
              {isSaving ? (
                <>
                  <div className="w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin mr-2" />
                  Adding...
                </>
              ) : (
                <>
                  <Plus className="w-4 h-4 mr-2" />
                  Add Student
                </>
              )}
            </Button>
          </form>
        </CardContent>
      </Card>

      {/* Students List */}
      <Card className="shadow-xl border-0 bg-white/80 backdrop-blur-sm">
        <CardHeader>
          <CardTitle className="flex items-center justify-between">
            <span className="flex items-center">
              <Users className="w-5 h-5 mr-2" />
              Students ({students.length})
            </span>
            {students.length > 0 && (
              <Badge variant="secondary" className="bg-blue-100 text-blue-800">
                Ready for Attendance
              </Badge>
            )}
          </CardTitle>
        </CardHeader>
        <CardContent>
          {students.length === 0 ? (
            <div className="text-center py-8">
              <Users className="w-12 h-12 text-slate-300 mx-auto mb-4" />
              <p className="text-slate-500 mb-2">No students added yet</p>
              <p className="text-sm text-slate-400">Add students manually or import from Excel/CSV</p>
            </div>
          ) : (
            <div className="space-y-2">
              {students.map((student) => (
                <div key={student.id} className="flex items-center justify-between p-4 bg-slate-50 rounded-lg border border-slate-200">
                  <div>
                    <div className="font-medium text-slate-800">{student.name}</div>
                    <div className="text-sm text-slate-600">Roll: {student.roll_number}</div>
                    {student.email && (
                      <div className="text-xs text-slate-500">{student.email}</div>
                    )}
                  </div>
                  <Button
                    variant="ghost"
                    size="icon"
                    onClick={() => handleDeleteStudent(student.id)}
                    className="text-red-500 hover:text-red-700 hover:bg-red-50"
                  >
                    <Trash2 className="w-4 h-4" />
                  </Button>
                </div>
              ))}
            </div>
          )}

          <div className="mt-6 pt-6 border-t border-slate-200">
            <Button
              onClick={handleFinish}
              className="w-full h-12 bg-gradient-to-r from-blue-600 to-indigo-600 hover:from-blue-700 hover:to-indigo-700 text-white font-medium shadow-lg transition-all duration-200"
            >
              Finish & Go to Dashboard
            </Button>
          </div>
        </CardContent>
      </Card>
    </div>
  );
}